- Add Queries
	= Get all recipies ---X
		== Get all active recipies ----X
	= Get all kitchen requests ------X
		== With option for not finished requests -----X
	= Get all orders ---------X
		== With oprion for filtering for status/table/assignee--X
	= Get all dishes ---------X
	= Get reservation by guest and datetime
	
	= Get Entities or at least AgregateRoots by ID if needed
	
- Add Commands --------X
	= Add method activate/deactivate to recipies with private property that keeps the information -------X
	= Change request status -----X
	= Change order status/close order-----X
	= Change AddItems method to take a collection of items instead of one item. ----------X
	This is done so the method could generate an event which generates a request in the kitchen bounded context.
	= Add items to order ----------X
	
- Add events
	= OrderItemsAdded - the request reference id is created in the serving bounded context and is set to the kitchen bounded context ----------X
	with the event in order to be used later for reference from the kitchen domain
	= Request status changed----------X
	= Order status changed - contains order id, request id, table id, and assignee id and is primarily used to notify the assignee for the change.
	= Recipe activated/deactivated - the corresponding dish must be deactivated/activated---------X
	
- Add event handlers
	= OrderItemsAdded - the kitchen bounded context handles this by creating a request -----X
	with the eventId as a reference to the order.
	= RequestStatusChanged - the serving bounded context calls method to change the status of the order, -------X
	which fires an Event - order status changed described above
	= ActiveRecipeChanged - changes the state of the corresponding dish ---------X
	
	
- Add Hosting bounded context --------X
	= Define Table agregate root with name, restaurant name or id, number of seats, 
	and value object table description. Table description contain for smokers, next to window, etc.
	Each table has collection of schedules.
	= Schedule entity, which corresponds to time period - in this case it will be used for a day. 
	Each schedule has collection of reservations. It also has usefull methods.
	= A reservation has optional guest value object and DateTimeRange. 
	= The Guest value object has first name, last name and phone number.
	
- Add Hosting commands -----X
	= Add create table ------X
	= Add add reservation commands - the command could have datetime in the future or no date time ------X
	as param. No datetime param means that the reservation starts now and is to be used 
	for sitting guests on a free table.
	= Add Delete Reservation ------X
	
- Add Hosting queries --------X
	= Try to combine this within one command with filters.
		== Get All free tables for a DateTime -----X
		== Get All tables by number of seats ---------X
		== Get All tables with schedule only for a specified Date - finish this when you are more familiar with 
		the EF core. Is it even necessary? - It is not necessary - can be done if needed in a real application.
	
- Add static Create methods for OrderItem and other ValueObjects that currently have public constructors, to encapsulate the constructor.
	
- Add validations

- Prevent the creation of dishes with the same RecipeId! ------X

- There is a problem with reading multiple children from the DB i.e. Schedules in Table - see GetTables test where -----X
none of the tables have schedules. Also there is a problem with deleting from the db - it gets deleted but when
multiple commands are called in the same test EF thinks that it is not deleted. However in this case the schedules are
correct - See DeleteReservation Test.

- Fix API paths - currently there are duplicating paths so there will be conflicts when calling the controller methods. ----X

- Move DatabaseInitializer to the Common projects. ------X

- Move the Authentication logic in Common.Web -------X

- Create and configure DB container. --------X
	= Add virtual network and connect it --X
	= Connect the DB to a container with API---------X
	= Add a volume for persistence ---------X

- Add the connections strings as environment variables in the docker-compose file. -------------X

- Add all other Microservices to the docker compose configuration. -----------X

- Add support for RabbitMQ in the EventDispatcher. ----X
	= Make all consumers receive the same universal message.

- See the branching strategy again to revise the steps of the plan if needed. It is in the Jenkins video -
	video #2 around 2nd hour and 15 min.
- See the way to make volumes in local environment - it is mentioned while explaining static volumes
- See rolling updates in the Advanced Clusterization - it is before the midpoint of the video
- See persisiting volumes in the Advanced Clusterization ot is after the midpoint of the video
- See configure kubectl command for changing the connection from local cluster to cloud cluster - in advanced clusterization video around 2h 51m
- See putting it all together for local deploy of cluster and putting it all together - in advanced clusterization around 2h 50min
- The DB requires 2gb ram so you need a bigger nodes on the dev cluster.

- Plan for Jenkins
	= Make Development Branch and after that push all changes to it only.
	= Jenkins file steps:
		= build all images
		= run images in docker from docker compose file.
		= test images with a powershell test script
		= push the images to docker hub with tag vx.x_dev for example
		= run images in local kubernetes (when the kubernetes config is ready)
		= test images with a powershell test script. If possible reuse the existing one
		= push images to docker hub
		= deploy to development environment in cloud
		= test deployment using script
		= merge and push to master. Try doing it using jenkins.
		= make the same steps for master but before deployment to production use a buttin in jenkins to confirm.
		
- Add a Get Version request to all APIs

- Add the Status Names to the Requests and DB

- Add tests	
	= Make tests run without having to delete the DB every time.
	= Extract repeating loginc into methods in the tests